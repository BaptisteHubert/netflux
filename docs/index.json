[
  {
    "__docId__": 0,
    "kind": "file",
    "name": "src/BotServerFacade.js",
    "content": "import { BotServer } from './BotServer';\nlet botServer;\n/**\n * Bot server may be a member of severals groups. Each group is isolated.\n * He can be invited by a group member via {@link WebGroup#invite} method.\n * @example\n * // In NodeJS:\n * // Create a bot server with full mesh topology, without autorejoin feature\n * // and with specified Signaling and ICE servers for WebRTC.\n * // Bot server is listening on 'ws://BOT_HOST:BOT_PORT'.\n *\n * const http = require('http')\n * const server = http.createServer(app.callback())\n * const bot = new WebGroupBotServer({\n *   signalingURL: 'wss://mysignaling.com'\n *   iceServers: [\n *     {\n *       urls: 'stun.l.google.com:19302'\n *     },\n *     {\n *       urls: ['turn:myturn.com?transport=udp', 'turn:myturn?transport=tcp'],\n *       username: 'user',\n *       password: 'password'\n *     }\n *   ],\n *   bot: { server }\n * })\n *\n * bot.onWebGroup = (wg) => {\n *   // TODO...\n * }\n *\n * server.listen(BOT_PORT, BOT_HOST)\n */\nexport class WebGroupBotServer {\n    /**\n     * @param {WebGroupBotServerOptions} options\n     * @param {Topology} [options.topology=Topology.FULL_MESH]\n     * @param {string} [options.signalingURL='wss://www.coedit.re:20473']\n     * @param {RTCIceServer[]} [options.iceServers=[{urls: 'stun:stun3.l.google.com:19302'}]]\n     * @param {boolean} [options.autoRejoin=false]\n     * @param {Object} options.bot\n     * @param {NodeJS.http.Server|NodeJS.https.Server} options.bot.server NodeJS http(s) server.\n     * @param {string} [options.bot.url] Bot server URL.\n     * @param {boolean} [options.bot.perMessageDeflate=false] Enable/disable permessage-deflate.\n     */\n    constructor(options) {\n        botServer = new BotServer(options);\n    }\n    /**\n     * NodeJS http server instance (See https://nodejs.org/api/http.html)\n     * @type {NodeJS.http.Server|NodeJS.https.Server}\n     */\n    get server() { return botServer.server; }\n    /**\n     * Set of web groups the bot is member of.\n     * @type {Set<WebGroup>}\n     */\n    get webGroups() { return botServer.webGroups; }\n    /**\n     * Bot server url. Used to invite the bot in a web group via {@link WebGroup#invite} method.\n     * @type {string}\n     */\n    get url() { return botServer.url; }\n    /**\n     * This handler is called when the bot has been invited into a web group by one its members.\n     * @type  {function(wg: WebGroup)} handler\n     */\n    set onWebGroup(handler) { botServer.onWebGroup = handler; }\n}\n",
    "static": true,
    "longname": "/home/philippe/workspace/netflux/docs/src/BotServerFacade.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 1,
    "kind": "class",
    "name": "WebGroupBotServer",
    "memberof": "src/BotServerFacade.js",
    "static": true,
    "longname": "src/BotServerFacade.js~WebGroupBotServer",
    "access": "public",
    "export": true,
    "importPath": "netflux/src/BotServerFacade.js",
    "importStyle": "{WebGroupBotServer}",
    "description": "Bot server may be a member of severals groups. Each group is isolated.\nHe can be invited by a group member via {@link WebGroup#invite} method.",
    "examples": [
      "// In NodeJS:\n// Create a bot server with full mesh topology, without autorejoin feature\n// and with specified Signaling and ICE servers for WebRTC.\n// Bot server is listening on 'ws://BOT_HOST:BOT_PORT'.\n\nconst http = require('http')\nconst server = http.createServer(app.callback())\nconst bot = new WebGroupBotServer({\n  signalingURL: 'wss://mysignaling.com'\n  iceServers: [\n    {\n      urls: 'stun.l.google.com:19302'\n    },\n    {\n      urls: ['turn:myturn.com?transport=udp', 'turn:myturn?transport=tcp'],\n      username: 'user',\n      password: 'password'\n    }\n  ],\n  bot: { server }\n})\n\nbot.onWebGroup = (wg) => {\n  // TODO...\n}\n\nserver.listen(BOT_PORT, BOT_HOST)"
    ],
    "lineNumber": 35,
    "interface": false
  },
  {
    "__docId__": 2,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/BotServerFacade.js~WebGroupBotServer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/BotServerFacade.js~WebGroupBotServer#constructor",
    "access": "public",
    "description": "",
    "lineNumber": 47,
    "params": [
      {
        "nullable": null,
        "types": [
          "WebGroupBotServerOptions"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Topology"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "Topology.FULL_MESH",
        "defaultRaw": "Topology.FULL_MESH",
        "name": "options.topology",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "'wss://www.coedit.re:20473'",
        "defaultRaw": "'wss://www.coedit.re:20473'",
        "name": "options.signalingURL",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "RTCIceServer[]"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "[{urls: 'stun:stun3.l.google.com:19302'}]",
        "defaultRaw": "[{urls: 'stun:stun3.l.google.com:19302'}]",
        "name": "options.iceServers",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "false",
        "defaultRaw": false,
        "name": "options.autoRejoin",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "options.bot",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "NodeJS.http.Server",
          "NodeJS.https.Server"
        ],
        "spread": false,
        "optional": false,
        "name": "options.bot.server",
        "description": "NodeJS http(s) server."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "name": "options.bot.url",
        "description": "Bot server URL."
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "false",
        "defaultRaw": false,
        "name": "options.bot.perMessageDeflate",
        "description": "Enable/disable permessage-deflate."
      }
    ]
  },
  {
    "__docId__": 3,
    "kind": "get",
    "name": "server",
    "memberof": "src/BotServerFacade.js~WebGroupBotServer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/BotServerFacade.js~WebGroupBotServer#server",
    "access": "public",
    "description": "NodeJS http server instance (See https://nodejs.org/api/http.html)",
    "lineNumber": 54,
    "type": {
      "nullable": null,
      "types": [
        "NodeJS.http.Server",
        "NodeJS.https.Server"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 4,
    "kind": "get",
    "name": "webGroups",
    "memberof": "src/BotServerFacade.js~WebGroupBotServer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/BotServerFacade.js~WebGroupBotServer#webGroups",
    "access": "public",
    "description": "Set of web groups the bot is member of.",
    "lineNumber": 59,
    "type": {
      "nullable": null,
      "types": [
        "Set<WebGroup>"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 5,
    "kind": "get",
    "name": "url",
    "memberof": "src/BotServerFacade.js~WebGroupBotServer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/BotServerFacade.js~WebGroupBotServer#url",
    "access": "public",
    "description": "Bot server url. Used to invite the bot in a web group via {@link WebGroup#invite} method.",
    "lineNumber": 64,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 6,
    "kind": "set",
    "name": "onWebGroup",
    "memberof": "src/BotServerFacade.js~WebGroupBotServer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/BotServerFacade.js~WebGroupBotServer#onWebGroup",
    "access": "public",
    "description": "This handler is called when the bot has been invited into a web group by one its members.",
    "lineNumber": 69,
    "type": {
      "nullable": null,
      "types": [
        "function(wg: WebGroup)"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 7,
    "kind": "file",
    "name": "src/WebChannelFacade.js",
    "content": "import { WebChannel } from './service/WebChannel';\n/**\n * @ignore\n */\nexport const wcs = new WeakMap();\n/**\n * This class is an API starting point. It represents a peer to peer network,\n * simply called a group. Each group member can send/receive broadcast\n * as well as personal messages, invite other persons or bots (see {@link WebGroupBotServer}).\n * @example\n * // Create a WebGroup with full mesh topology, autorejoin feature and\n * // specified Signaling and ICE servers for WebRTC.\n *\n * const wg = new WebGroup({\n *   signalingURL: 'wss://mysignaling.com'\n *   iceServers: [\n *     {\n *       urls: 'stun.l.google.com:19302'\n *     },\n *     {\n *       urls: ['turn:myturn.com?transport=udp', 'turn:myturn?transport=tcp'],\n *       username: 'user',\n *       password: 'password'\n *     }\n *   ]\n * })\n *\n * wg.onMemberJoin = (id) => {\n *   // TODO...\n * }\n * wg.onMemberLeave = (id) => {\n *   // TODO...\n * }\n * wg.onMessage = (id, msg, isBroadcast) => {\n *   // TODO...\n * }\n * wg.onStateChanged = (state) => {\n *   // TODO...\n * }\n * wg.onSignalingStateChanged = (state) => {\n *   // TODO...\n * }\n */\nexport class WebGroup {\n    /**\n     * @param {WebGroupOptions} [options]\n     * @param {Topology} [options.topology=Topology.FULL_MESH]\n     * @param {string} [options.signalingURL='wss://www.coedit.re:20473']\n     * @param {RTCIceServer[]} [options.iceServers=[{urls: 'stun:stun3.l.google.com:19302'}]]\n     * @param {boolean} [options.autoRejoin=true]\n     */\n    constructor(options = {}) {\n        wcs.set(this, new WebChannel(options));\n    }\n    /**\n     * {@link WebGroup} identifier. The same value for all members.\n     * @type {number}\n     */\n    get id() { return wcs.get(this).id; }\n    /**\n     * Your unique member identifier in the group.\n     * @type {number}\n     */\n    get myId() { return wcs.get(this).myId; }\n    /**\n     * An array of member identifiers (except yours).\n     * @type {number[]}\n     */\n    get members() { return wcs.get(this).members; }\n    /**\n     * Topology identifier.\n     * @type {Topology}\n     */\n    get topology() { return wcs.get(this).topology; }\n    /**\n     * The state of the {@link WebGroup} connection.\n     * @type {WebGroupState}\n     */\n    get state() { return wcs.get(this).state; }\n    /**\n     * The state of the signaling server.\n     * @type {SignalingState}\n     */\n    get signalingState() { return wcs.get(this).signaling.state; }\n    /**\n     * The signaling server URL.\n     * @type {string}\n     */\n    get signalingURL() { return wcs.get(this).signaling.url; }\n    /**\n     * If equals to true, auto rejoin feature is enabled.\n     * @type {boolean}\n     */\n    get autoRejoin() { return wcs.get(this).autoRejoin; }\n    /**\n     * Enable/Desable the auto rejoin feature.\n     * @type {boolean}\n     */\n    set autoRejoin(value) { wcs.get(this).autoRejoin = value; }\n    /**\n     * This handler is called when a message has been received from the group.\n     * @type {function(id: number, msg: DataTypeView, isBroadcast: boolean)}\n     */\n    set onMessage(handler) { wcs.get(this).onMessage = handler; }\n    /**\n     * This handler is called when a new member has joined the group.\n     * @type {function(id: number)}\n     */\n    set onMemberJoin(handler) { wcs.get(this).onMemberJoin = handler; }\n    /**\n     * This handler is called when a member hes left the group.\n     * @type {function(id: number)}\n     */\n    set onMemberLeave(handler) { wcs.get(this).onMemberLeave = handler; }\n    /**\n     * This handler is called when the group state has changed.\n     * @type {function(state: WebGroupState)}\n     */\n    set onStateChanged(handler) { wcs.get(this).onStateChanged = handler; }\n    /**\n     * This handler is called when the signaling state has changed.\n     * @type {function(state: SignalingState)}\n     */\n    set onSignalingStateChanged(handler) { wcs.get(this).onSignalingStateChanged = handler; }\n    /**\n     * Join the group identified by a key provided by one of the group member.\n     * @param {string} key\n     */\n    join(key) { return wcs.get(this).join(key); }\n    /**\n     * Invite a bot server to join this group.\n     * @param {string} url - Bot server URL (See {@link WebGroupBotServerOptions})\n     */\n    invite(url) { return wcs.get(this).invite(url); }\n    /**\n     * Close the connection with Signaling server.\n     */\n    closeSignaling() { return wcs.get(this).closeSignaling(); }\n    /**\n     * Leave the group which means close channels with all members and connection\n     * with Signaling server.\n     */\n    leave() { return wcs.get(this).leave(); }\n    /**\n     * Broadcast a message to the group.\n     * @param {DataTypeView} data\n     */\n    send(data) { return wcs.get(this).send(data); }\n    /**\n     * Send a message to a particular group member.\n     * @param {number}    id Member identifier\n     * @param {DataTypeView}  data Message\n     */\n    sendTo(id, data) { return wcs.get(this).sendTo(id, data); }\n    /**\n     * Get web group latency\n     * @return {Promise<number>} Latency in milliseconds\n     */\n    ping() { return wcs.get(this).ping(); }\n}\n",
    "static": true,
    "longname": "/home/philippe/workspace/netflux/docs/src/WebChannelFacade.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 8,
    "kind": "variable",
    "name": "wcs",
    "memberof": "src/WebChannelFacade.js",
    "static": true,
    "longname": "src/WebChannelFacade.js~wcs",
    "access": "public",
    "export": true,
    "importPath": "netflux/src/WebChannelFacade.js",
    "importStyle": "{wcs}",
    "description": "",
    "lineNumber": 5,
    "ignore": true
  },
  {
    "__docId__": 9,
    "kind": "class",
    "name": "WebGroup",
    "memberof": "src/WebChannelFacade.js",
    "static": true,
    "longname": "src/WebChannelFacade.js~WebGroup",
    "access": "public",
    "export": true,
    "importPath": "netflux/src/WebChannelFacade.js",
    "importStyle": "{WebGroup}",
    "description": "This class is an API starting point. It represents a peer to peer network,\nsimply called a group. Each group member can send/receive broadcast\nas well as personal messages, invite other persons or bots (see {@link WebGroupBotServer}).",
    "examples": [
      "// Create a WebGroup with full mesh topology, autorejoin feature and\n// specified Signaling and ICE servers for WebRTC.\n\nconst wg = new WebGroup({\n  signalingURL: 'wss://mysignaling.com'\n  iceServers: [\n    {\n      urls: 'stun.l.google.com:19302'\n    },\n    {\n      urls: ['turn:myturn.com?transport=udp', 'turn:myturn?transport=tcp'],\n      username: 'user',\n      password: 'password'\n    }\n  ]\n})\n\nwg.onMemberJoin = (id) => {\n  // TODO...\n}\nwg.onMemberLeave = (id) => {\n  // TODO...\n}\nwg.onMessage = (id, msg, isBroadcast) => {\n  // TODO...\n}\nwg.onStateChanged = (state) => {\n  // TODO...\n}\nwg.onSignalingStateChanged = (state) => {\n  // TODO...\n}"
    ],
    "lineNumber": 44,
    "interface": false
  },
  {
    "__docId__": 10,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/WebChannelFacade.js~WebGroup",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/WebChannelFacade.js~WebGroup#constructor",
    "access": "public",
    "description": "",
    "lineNumber": 52,
    "params": [
      {
        "nullable": null,
        "types": [
          "WebGroupOptions"
        ],
        "spread": false,
        "optional": true,
        "name": "options",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Topology"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "Topology.FULL_MESH",
        "defaultRaw": "Topology.FULL_MESH",
        "name": "options.topology",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "'wss://www.coedit.re:20473'",
        "defaultRaw": "'wss://www.coedit.re:20473'",
        "name": "options.signalingURL",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "RTCIceServer[]"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "[{urls: 'stun:stun3.l.google.com:19302'}]",
        "defaultRaw": "[{urls: 'stun:stun3.l.google.com:19302'}]",
        "name": "options.iceServers",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "true",
        "defaultRaw": true,
        "name": "options.autoRejoin",
        "description": ""
      }
    ]
  },
  {
    "__docId__": 11,
    "kind": "get",
    "name": "id",
    "memberof": "src/WebChannelFacade.js~WebGroup",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/WebChannelFacade.js~WebGroup#id",
    "access": "public",
    "description": "{@link WebGroup} identifier. The same value for all members.",
    "lineNumber": 59,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 12,
    "kind": "get",
    "name": "myId",
    "memberof": "src/WebChannelFacade.js~WebGroup",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/WebChannelFacade.js~WebGroup#myId",
    "access": "public",
    "description": "Your unique member identifier in the group.",
    "lineNumber": 64,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 13,
    "kind": "get",
    "name": "members",
    "memberof": "src/WebChannelFacade.js~WebGroup",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/WebChannelFacade.js~WebGroup#members",
    "access": "public",
    "description": "An array of member identifiers (except yours).",
    "lineNumber": 69,
    "type": {
      "nullable": null,
      "types": [
        "number[]"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 14,
    "kind": "get",
    "name": "topology",
    "memberof": "src/WebChannelFacade.js~WebGroup",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/WebChannelFacade.js~WebGroup#topology",
    "access": "public",
    "description": "Topology identifier.",
    "lineNumber": 74,
    "type": {
      "nullable": null,
      "types": [
        "Topology"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 15,
    "kind": "get",
    "name": "state",
    "memberof": "src/WebChannelFacade.js~WebGroup",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/WebChannelFacade.js~WebGroup#state",
    "access": "public",
    "description": "The state of the {@link WebGroup} connection.",
    "lineNumber": 79,
    "type": {
      "nullable": null,
      "types": [
        "WebGroupState"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 16,
    "kind": "get",
    "name": "signalingState",
    "memberof": "src/WebChannelFacade.js~WebGroup",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/WebChannelFacade.js~WebGroup#signalingState",
    "access": "public",
    "description": "The state of the signaling server.",
    "lineNumber": 84,
    "type": {
      "nullable": null,
      "types": [
        "SignalingState"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 17,
    "kind": "get",
    "name": "signalingURL",
    "memberof": "src/WebChannelFacade.js~WebGroup",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/WebChannelFacade.js~WebGroup#signalingURL",
    "access": "public",
    "description": "The signaling server URL.",
    "lineNumber": 89,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 18,
    "kind": "get",
    "name": "autoRejoin",
    "memberof": "src/WebChannelFacade.js~WebGroup",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/WebChannelFacade.js~WebGroup#autoRejoin",
    "access": "public",
    "description": "If equals to true, auto rejoin feature is enabled.",
    "lineNumber": 94,
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 19,
    "kind": "set",
    "name": "autoRejoin",
    "memberof": "src/WebChannelFacade.js~WebGroup",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/WebChannelFacade.js~WebGroup#autoRejoin",
    "access": "public",
    "description": "Enable/Desable the auto rejoin feature.",
    "lineNumber": 99,
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 20,
    "kind": "set",
    "name": "onMessage",
    "memberof": "src/WebChannelFacade.js~WebGroup",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/WebChannelFacade.js~WebGroup#onMessage",
    "access": "public",
    "description": "This handler is called when a message has been received from the group.",
    "lineNumber": 104,
    "type": {
      "nullable": null,
      "types": [
        "function(id: number, msg: DataTypeView, isBroadcast: boolean)"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 21,
    "kind": "set",
    "name": "onMemberJoin",
    "memberof": "src/WebChannelFacade.js~WebGroup",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/WebChannelFacade.js~WebGroup#onMemberJoin",
    "access": "public",
    "description": "This handler is called when a new member has joined the group.",
    "lineNumber": 109,
    "type": {
      "nullable": null,
      "types": [
        "function(id: number)"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 22,
    "kind": "set",
    "name": "onMemberLeave",
    "memberof": "src/WebChannelFacade.js~WebGroup",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/WebChannelFacade.js~WebGroup#onMemberLeave",
    "access": "public",
    "description": "This handler is called when a member hes left the group.",
    "lineNumber": 114,
    "type": {
      "nullable": null,
      "types": [
        "function(id: number)"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 23,
    "kind": "set",
    "name": "onStateChanged",
    "memberof": "src/WebChannelFacade.js~WebGroup",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/WebChannelFacade.js~WebGroup#onStateChanged",
    "access": "public",
    "description": "This handler is called when the group state has changed.",
    "lineNumber": 119,
    "type": {
      "nullable": null,
      "types": [
        "function(state: WebGroupState)"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 24,
    "kind": "set",
    "name": "onSignalingStateChanged",
    "memberof": "src/WebChannelFacade.js~WebGroup",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/WebChannelFacade.js~WebGroup#onSignalingStateChanged",
    "access": "public",
    "description": "This handler is called when the signaling state has changed.",
    "lineNumber": 124,
    "type": {
      "nullable": null,
      "types": [
        "function(state: SignalingState)"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 25,
    "kind": "method",
    "name": "join",
    "memberof": "src/WebChannelFacade.js~WebGroup",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/WebChannelFacade.js~WebGroup#join",
    "access": "public",
    "description": "Join the group identified by a key provided by one of the group member.",
    "lineNumber": 129,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "key",
        "description": ""
      }
    ]
  },
  {
    "__docId__": 26,
    "kind": "method",
    "name": "invite",
    "memberof": "src/WebChannelFacade.js~WebGroup",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/WebChannelFacade.js~WebGroup#invite",
    "access": "public",
    "description": "Invite a bot server to join this group.",
    "lineNumber": 134,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "url",
        "description": "Bot server URL (See {@link WebGroupBotServerOptions})"
      }
    ]
  },
  {
    "__docId__": 27,
    "kind": "method",
    "name": "closeSignaling",
    "memberof": "src/WebChannelFacade.js~WebGroup",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/WebChannelFacade.js~WebGroup#closeSignaling",
    "access": "public",
    "description": "Close the connection with Signaling server.",
    "lineNumber": 138
  },
  {
    "__docId__": 28,
    "kind": "method",
    "name": "leave",
    "memberof": "src/WebChannelFacade.js~WebGroup",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/WebChannelFacade.js~WebGroup#leave",
    "access": "public",
    "description": "Leave the group which means close channels with all members and connection\nwith Signaling server.",
    "lineNumber": 143
  },
  {
    "__docId__": 29,
    "kind": "method",
    "name": "send",
    "memberof": "src/WebChannelFacade.js~WebGroup",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/WebChannelFacade.js~WebGroup#send",
    "access": "public",
    "description": "Broadcast a message to the group.",
    "lineNumber": 148,
    "params": [
      {
        "nullable": null,
        "types": [
          "DataTypeView"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": ""
      }
    ]
  },
  {
    "__docId__": 30,
    "kind": "method",
    "name": "sendTo",
    "memberof": "src/WebChannelFacade.js~WebGroup",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/WebChannelFacade.js~WebGroup#sendTo",
    "access": "public",
    "description": "Send a message to a particular group member.",
    "lineNumber": 154,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "id",
        "description": "Member identifier"
      },
      {
        "nullable": null,
        "types": [
          "DataTypeView"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": "Message"
      }
    ]
  },
  {
    "__docId__": 31,
    "kind": "method",
    "name": "ping",
    "memberof": "src/WebChannelFacade.js~WebGroup",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/WebChannelFacade.js~WebGroup#ping",
    "access": "public",
    "description": "Get web group latency",
    "lineNumber": 159,
    "return": {
      "nullable": null,
      "types": [
        "Promise<number>"
      ],
      "spread": false,
      "description": "Latency in milliseconds"
    }
  },
  {
    "__docId__": 32,
    "kind": "file",
    "name": "src/types/esdoc.helper.js",
    "content": "/**\n * Is a helper type representing types that can be sent/received over a web group.\n * @typedef {string|Uint8Array} DataTypeView\n */\n/**\n * Topology enum.\n * @typedef {Object} Topology\n * @property {number} [FULL_MESH=0] Full mesh topology.\n */\n/**\n * The state fo the signaling server for WebRTC.\n * @typedef {Object} SignalingState\n * @property {number} [CONNECTING=0] The connection is not yet open.\n * @property {number} [OPEN=1] The connection is open and ready to communicate.\n * @property {number} [FIRST_CONNECTED=2] `RTCDataChannel` has been established\n * with one of the web group member. From now the signaling is no longer needed,\n * because the next of the joining process will pass through this member.\n * @property {number} [READY_TO_JOIN_OTHERS=3] You are successfully joined a\n * web group and ready to join others.\n * @property {number} [CLOSED=4] The connection is closed.\n */\n/**\n * {@link WebGroup} state enum.\n * @typedef {Object} WebGroupState\n * @property {number} [JOINING=0] You are joining the web group.\n * @property {number} [JOINED=1] You have successfully joined the web group\n * and ready to broadcast messages via `send` method.\n * @property {number} [LEFT=2] You have left the web group. If the connection\n * to the web group has lost and `autoRejoin=true`, then the state would be `LEFT`,\n * (usually during a relatively short period) before the rejoining process start.\n */\n/**\n * The options to be passed into {@link WebGroup} constructor.\n * @typedef {Object} WebGroupOptions\n * @property {Topology} topology Topology identifier\n * (Full mesh is the only one supported by Netflux for now).\n * @property {string} signalingURL Signaling URL for WebRTC.\n * @property {RTCIceServer[]} iceServers Array of Ice servers for WebRTC.\n * @property {boolean} autoRejoin Whether to automatically rejoin the web group\n * on disconnect or not. Its value may be modified after {@link WebGroup}\n * instantiation at any time.\n */\n/**\n * The options to be passed into {@link WebGroupBotServer} constructor.\n * @typedef {Object} WebGroupBotServerOptions\n * @property {Topology} [topology] See WebGroupOptions.topology\n * @property {string} [signalingURL] See WebGroupOptions.signalingURL\n * @property {RTCIceServer[]} [iceServers] See WebGroupOptions.iceServers\n * @property {boolean} [autoRejoin] See WebGroupOptions.autoRejoin\n * @property {Object} bot Server related options of the bot.\n * @property {NodeJS.http.Server|NodeJS.https.Server} bot.server NodeJS http(s) server.\n * @property {string} [bot.url] Bot server URL.\n * @property {boolean} [bot.perMessageDeflate] Enable/disable permessage-deflate.\n */\n/**\n * @external {RTCIceServer} https://developer.mozilla.org/en/docs/Web/API/RTCIceServer\n */\n/**\n * @external {Uint8Array} https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array\n */\n/**\n * @external {NodeJS.http.Server} https://nodejs.org/api/http.html#http_class_http_server\n */\n/**\n * @external {NodeJS.https.Server} https://nodejs.org/api/https.html#https_class_https_server\n */\n",
    "static": true,
    "longname": "/home/philippe/workspace/netflux/docs/src/types/esdoc.helper.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 33,
    "kind": "typedef",
    "name": "DataTypeView",
    "memberof": "src/types/esdoc.helper.js",
    "static": true,
    "longname": "src/types/esdoc.helper.js~DataTypeView",
    "access": "public",
    "description": "Is a helper type representing types that can be sent/received over a web group.",
    "type": {
      "types": [
        "string",
        "Uint8Array"
      ],
      "optional": false,
      "name": "DataTypeView"
    }
  },
  {
    "__docId__": 34,
    "kind": "typedef",
    "name": "Topology",
    "memberof": "src/types/esdoc.helper.js",
    "static": true,
    "longname": "src/types/esdoc.helper.js~Topology",
    "access": "public",
    "description": "Topology enum.",
    "properties": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "0",
        "defaultRaw": 0,
        "name": "FULL_MESH",
        "description": "Full mesh topology."
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "Topology"
    }
  },
  {
    "__docId__": 35,
    "kind": "typedef",
    "name": "SignalingState",
    "memberof": "src/types/esdoc.helper.js",
    "static": true,
    "longname": "src/types/esdoc.helper.js~SignalingState",
    "access": "public",
    "description": "The state fo the signaling server for WebRTC.",
    "properties": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "0",
        "defaultRaw": 0,
        "name": "CONNECTING",
        "description": "The connection is not yet open."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "1",
        "defaultRaw": 1,
        "name": "OPEN",
        "description": "The connection is open and ready to communicate."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "2",
        "defaultRaw": 2,
        "name": "FIRST_CONNECTED",
        "description": "`RTCDataChannel` has been established\nwith one of the web group member. From now the signaling is no longer needed,\nbecause the next of the joining process will pass through this member."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "3",
        "defaultRaw": 3,
        "name": "READY_TO_JOIN_OTHERS",
        "description": "You are successfully joined a\nweb group and ready to join others."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "4",
        "defaultRaw": 4,
        "name": "CLOSED",
        "description": "The connection is closed."
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "SignalingState"
    }
  },
  {
    "__docId__": 36,
    "kind": "typedef",
    "name": "WebGroupState",
    "memberof": "src/types/esdoc.helper.js",
    "static": true,
    "longname": "src/types/esdoc.helper.js~WebGroupState",
    "access": "public",
    "description": "{@link WebGroup} state enum.",
    "properties": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "0",
        "defaultRaw": 0,
        "name": "JOINING",
        "description": "You are joining the web group."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "1",
        "defaultRaw": 1,
        "name": "JOINED",
        "description": "You have successfully joined the web group\nand ready to broadcast messages via `send` method."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "2",
        "defaultRaw": 2,
        "name": "LEFT",
        "description": "You have left the web group. If the connection\nto the web group has lost and `autoRejoin=true`, then the state would be `LEFT`,\n(usually during a relatively short period) before the rejoining process start."
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "WebGroupState"
    }
  },
  {
    "__docId__": 37,
    "kind": "typedef",
    "name": "WebGroupOptions",
    "memberof": "src/types/esdoc.helper.js",
    "static": true,
    "longname": "src/types/esdoc.helper.js~WebGroupOptions",
    "access": "public",
    "description": "The options to be passed into {@link WebGroup} constructor.",
    "properties": [
      {
        "nullable": null,
        "types": [
          "Topology"
        ],
        "spread": false,
        "optional": false,
        "name": "topology",
        "description": "Topology identifier\n(Full mesh is the only one supported by Netflux for now)."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "signalingURL",
        "description": "Signaling URL for WebRTC."
      },
      {
        "nullable": null,
        "types": [
          "RTCIceServer[]"
        ],
        "spread": false,
        "optional": false,
        "name": "iceServers",
        "description": "Array of Ice servers for WebRTC."
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "autoRejoin",
        "description": "Whether to automatically rejoin the web group\non disconnect or not. Its value may be modified after {@link WebGroup}\ninstantiation at any time."
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "WebGroupOptions"
    }
  },
  {
    "__docId__": 38,
    "kind": "typedef",
    "name": "WebGroupBotServerOptions",
    "memberof": "src/types/esdoc.helper.js",
    "static": true,
    "longname": "src/types/esdoc.helper.js~WebGroupBotServerOptions",
    "access": "public",
    "description": "The options to be passed into {@link WebGroupBotServer} constructor.",
    "properties": [
      {
        "nullable": null,
        "types": [
          "Topology"
        ],
        "spread": false,
        "optional": true,
        "name": "topology",
        "description": "See WebGroupOptions.topology"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "name": "signalingURL",
        "description": "See WebGroupOptions.signalingURL"
      },
      {
        "nullable": null,
        "types": [
          "RTCIceServer[]"
        ],
        "spread": false,
        "optional": true,
        "name": "iceServers",
        "description": "See WebGroupOptions.iceServers"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "name": "autoRejoin",
        "description": "See WebGroupOptions.autoRejoin"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "bot",
        "description": "Server related options of the bot."
      },
      {
        "nullable": null,
        "types": [
          "NodeJS.http.Server",
          "NodeJS.https.Server"
        ],
        "spread": false,
        "optional": false,
        "name": "bot.server",
        "description": "NodeJS http(s) server."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "name": "bot.url",
        "description": "Bot server URL."
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "name": "bot.perMessageDeflate",
        "description": "Enable/disable permessage-deflate."
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "WebGroupBotServerOptions"
    }
  },
  {
    "__docId__": 39,
    "kind": "external",
    "name": "RTCIceServer",
    "externalLink": "https://developer.mozilla.org/en/docs/Web/API/RTCIceServer",
    "memberof": "src/types/esdoc.helper.js",
    "static": true,
    "longname": "src/types/esdoc.helper.js~RTCIceServer",
    "access": "public",
    "description": ""
  },
  {
    "__docId__": 40,
    "kind": "external",
    "name": "Uint8Array",
    "externalLink": "https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array",
    "memberof": "src/types/esdoc.helper.js",
    "static": true,
    "longname": "src/types/esdoc.helper.js~Uint8Array",
    "access": "public",
    "description": ""
  },
  {
    "__docId__": 41,
    "kind": "external",
    "name": "NodeJS.http.Server",
    "externalLink": "https://nodejs.org/api/http.html#http_class_http_server",
    "memberof": "src/types/esdoc.helper.js",
    "static": true,
    "longname": "src/types/esdoc.helper.js~NodeJS.http.Server",
    "access": "public",
    "description": ""
  },
  {
    "__docId__": 42,
    "kind": "external",
    "name": "NodeJS.https.Server",
    "externalLink": "https://nodejs.org/api/https.html#https_class_https_server",
    "memberof": "src/types/esdoc.helper.js",
    "static": true,
    "longname": "src/types/esdoc.helper.js~NodeJS.https.Server",
    "access": "public",
    "description": ""
  },
  {
    "kind": "index",
    "content": "<p align=\"center\"><img src=\"manual/asset/logo.png\" /></p>\n\n<p align=\"center\">\n  Universal Javascript <strong style=\"font-weight: bold\">peer to peer</strong> transport API for client and server.<br />\n  Full mesh peer to peer network based on <strong style=\"font-weight: bold\">RTCDataChannel</strong> and <strong style=\"font-weight: bold\">WebSocket</strong>.<br />\n  Send/receive <strong style=\"font-weight: bold\">String</strong> and <strong style=\"font-weight: bold\">Uint8Array</strong> data types.\n</p>\n\n<p align=\"center\">\n  <a href=\"https://www.npmjs.com/package/netflux\">\n    <img src=\"https://img.shields.io/npm/v/netflux.svg?style=flat-square\" />\n  </a>&nbsp;\n  <a href=\"https://travis-ci.org/coast-team/netflux\">\n    <img src=\"https://travis-ci.org/coast-team/netflux.svg?branch=master\" />\n  </a>&nbsp;\n  <a href=\"https://github.com/semantic-release/semantic-release\">\n    <img src=\"https://img.shields.io/badge/%20%20%F0%9F%93%A6%F0%9F%9A%80-semantic--release-e10079.svg?style=flat-square\" />\n  </a>&nbsp;\n  <a href=\"https://gitter.im/coast-team/netflux?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge\">\n    <img src=\"https://img.shields.io/badge/GITTER-join%20chat-green.svg?style=flat-square\" />\n  </a>\n\n  <br />\n\n  <a href=\"http://commitizen.github.io/cz-cli\">\n    <img src=\"https://img.shields.io/badge/commitizen-friendly-brightgreen.svg?style=flat-square\" />\n  </a>&nbsp;\n  <a href=\"https://www.bithound.io/github/coast-team/netflux\">\n    <img src=\"https://www.bithound.io/github/coast-team/netflux/badges/score.svg\" />\n  </a>&nbsp;\n  <a href=\"https://codeclimate.com/github/coast-team/netflux\">\n    <img src=\"https://codeclimate.com/github/coast-team/netflux/badges/gpa.svg\" />\n  </a>&nbsp;\n  <a href=\"https://codeclimate.com/github/coast-team/netflux/coverage\">\n    <img src=\"https://codeclimate.com/github/coast-team/netflux/badges/coverage.svg\" />\n  </a>&nbsp;\n  <a href=\"https://doc.esdoc.org/github.com/coast-team/netflux\">\n    <img src=\"https://doc.esdoc.org/github.com/coast-team/netflux/badge.svg\" />\n  </a>\n</p>\n\n<p align=\"center\">\n  <img src=\"manual/asset/example_support.png\" />\n</p>\n\n## Features\n- Universal API (works in Chrome/Firefox and NodeJS).\n- TypeScript declaration files are included.\n- Create peer to peer full mesh network.\n- Send/receive [String][String], [Uint8Array][Uint8Array] data types.\n- Automatic rejoin when the connection with Signaling has lost.\n- Automatic selection between [WebSocket][WebSocket] & [RTCDataChannel][RTCDataChannel].\n- Full control over WebRTC servers: Signaling, STUN and TURN.\n  - Deploy your own Signaling server ([Sigver][Sigver]) or use one provided by default.\n  - Configure STUN and TURN servers.\n- Small Signaling server payload: server is necessary to establish the first connection with\n  one of the group member, then this member acts as a Signaling server to establish connections with the rest of the group members.\n- 4 builds (ES5 code):\n  - `dist/netflux.cjs.js` - CommonJS format for NodeJS (see *package.json#main*)\n  - `dist/netflux.node.esm.js` - ECMAScript 6 module format for NodeJS (see *package.json#module*).\n  - `dist/netflux.browser.esm.js` - ECMAScript 6 module format for browsers (see *package.json#browser*).\n  - `dist/netflux.umd.js` - UMD format for browsers.\n\n## Documentation\nWebsite: https://coast-team.github.io/netflux\n\n[WebSocket]: https://developer.mozilla.org/en/docs/Web/API/WebSocket\n[RTCDataChannel]: https://developer.mozilla.org/en/docs/Web/API/RTCDataChannel\n[String]: https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/String\n[ArrayBuffer]: https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer\n[TypedArray]: https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/TypedArray\n[Sigver]: https://github.com/coast-team/sigver\n\n[commitizen]: https://img.shields.io/badge/commitizen-friendly-brightgreen.svg?style=flat-square\n[commitizen-url]: http://commitizen.github.io/cz-cli\n\n[bithound]: https://www.bithound.io/github/coast-team/netflux/badges/score.svg\n[bithound-url]: https://www.bithound.io/github/coast-team/netflux\n\n[codeclimate]: https://codeclimate.com/github/coast-team/netflux/badges/gpa.svg\n[codeclimate-url]: https://codeclimate.com/github/coast-team/netflux\n\n[coverage]: https://codeclimate.com/github/coast-team/netflux/badges/coverage.svg\n[coverage-url]: https://codeclimate.com/github/coast-team/netflux/coverage\n\n[doc]: https://doc.esdoc.org/github.com/coast-team/netflux/badge.svg\n[doc-url]: https://doc.esdoc.org/github.com/coast-team/netflux\n",
    "longname": "/home/philippe/workspace/netflux/README.md",
    "name": "./README.md",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manualIndex",
    "globalIndex": true,
    "content": "![Netflux logo][logo]\n\nUniversal Javascript **peer to peer** transport API for client and server. Full mesh peer to peer network based on **RTCDataChannel** and **WebSocket**. Send/receive **String** and **Uint8Array** data types.\n\n\n<p align=\"center\">\n  <a href=\"https://www.npmjs.com/package/netflux\">\n    <img src=\"https://img.shields.io/npm/v/netflux.svg?style=flat-square\" />\n  </a>&nbsp;\n  <a href=\"https://travis-ci.org/coast-team/netflux\">\n    <img src=\"https://travis-ci.org/coast-team/netflux.svg?branch=master\" />\n  </a>&nbsp;\n  <a href=\"https://github.com/semantic-release/semantic-release\">\n    <img src=\"https://img.shields.io/badge/%20%20%F0%9F%93%A6%F0%9F%9A%80-semantic--release-e10079.svg?style=flat-square\" />\n  </a>&nbsp;\n  <a href=\"https://gitter.im/coast-team/netflux?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge\">\n    <img src=\"https://img.shields.io/badge/GITTER-join%20chat-green.svg?style=flat-square\" />\n  </a>\n\n  <br />\n\n  <a href=\"http://commitizen.github.io/cz-cli\">\n    <img src=\"https://img.shields.io/badge/commitizen-friendly-brightgreen.svg?style=flat-square\" />\n  </a>&nbsp;\n  <a href=\"https://www.bithound.io/github/coast-team/netflux\">\n    <img src=\"https://www.bithound.io/github/coast-team/netflux/badges/score.svg\" />\n  </a>&nbsp;\n  <a href=\"https://codeclimate.com/github/coast-team/netflux\">\n    <img src=\"https://codeclimate.com/github/coast-team/netflux/badges/gpa.svg\" />\n  </a>&nbsp;\n  <a href=\"https://codeclimate.com/github/coast-team/netflux/coverage\">\n    <img src=\"https://codeclimate.com/github/coast-team/netflux/badges/coverage.svg\" />\n  </a>&nbsp;\n  <a href=\"https://doc.esdoc.org/github.com/coast-team/netflux\">\n    <img src=\"https://doc.esdoc.org/github.com/coast-team/netflux/badge.svg\" />\n  </a>\n</p>\n\n<p align=\"center\">\n  <img src=\"manual/asset/example_support.png\" />\n</p>\n\n## Features\n- Universal API (works in Chrome/Firefox and NodeJS).\n- TypeScript declaration files are included.\n- Create peer to peer full mesh network.\n- Send/receive [String][String], [Uint8Array][Uint8Array] data types.\n- Automatic rejoin when the connection with Signaling has lost.\n- Automatic selection between [WebSocket][WebSocket] & [RTCDataChannel][RTCDataChannel].\n- Full control over WebRTC servers: Signaling, STUN and TURN.\n  - Deploy your own Signaling server ([Sigver][Sigver]) or use one provided by default.\n  - Configure STUN and TURN servers.\n- Small Signaling server payload: server is necessary to establish the first connection with\n  one of the group member, then this member acts as a Signaling server to establish connections with the rest of the group members.\n- 4 builds (ES5 code):\n  - `dist/netflux.cjs.js` - CommonJS format for NodeJS (see *package.json#main*)\n  - `dist/netflux.node.esm.js` - ECMAScript 6 module format for NodeJS (see *package.json#module*).\n  - `dist/netflux.browser.esm.js` - ECMAScript 6 module format for browsers (see *package.json#browser*).\n  - `dist/netflux.umd.js` - UMD format for browsers.\n\n[WebSocket]: https://developer.mozilla.org/en/docs/Web/API/WebSocket\n[RTCDataChannel]: https://developer.mozilla.org/en/docs/Web/API/RTCDataChannel\n[String]: https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/String\n[ArrayBuffer]: https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer\n[TypedArray]: https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/TypedArray\n[Sigver]: https://github.com/coast-team/sigver\n\n[commitizen]: https://img.shields.io/badge/commitizen-friendly-brightgreen.svg?style=flat-square\n[commitizen-url]: http://commitizen.github.io/cz-cli\n\n[bithound]: https://www.bithound.io/github/coast-team/netflux/badges/score.svg\n[bithound-url]: https://www.bithound.io/github/coast-team/netflux\n\n[codeclimate]: https://codeclimate.com/github/coast-team/netflux/badges/gpa.svg\n[codeclimate-url]: https://codeclimate.com/github/coast-team/netflux\n\n[coverage]: https://codeclimate.com/github/coast-team/netflux/badges/coverage.svg\n[coverage-url]: https://codeclimate.com/github/coast-team/netflux/coverage\n\n[doc]: https://doc.esdoc.org/github.com/coast-team/netflux/badge.svg\n[doc-url]: https://doc.esdoc.org/github.com/coast-team/netflux\n\n[logo]: manual/asset/logo_big.png \"Netflux logo\"\n",
    "longname": "/home/philippe/workspace/netflux/manual/index.md",
    "name": "./manual/index.md",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manualAsset",
    "longname": "/home/philippe/workspace/netflux/manual/asset",
    "name": "./manual/asset",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manual",
    "longname": "/home/philippe/workspace/netflux/manual/installation.md",
    "name": "./manual/installation.md",
    "content": "# Installation\n\n## NPM\n```shell\nnpm install -S netflux\n```\nNetflux has an optional peer dependency: `wrtc`. This package provides WebRTC API in NodeJS. It is optional because Netflux can use `WebSocket` instead. For some use cases maybe you still want to connect your server to the peer to peer network via `RTCDataChannel`, then you have to successfully install this dependency, checkout [wrtc repository](https://github.com/js-platform/node-webrtc) then.\n\n\n## What you need\nSignaling server is only mandatory server for Netflux, but for a fully functional peer to peer network (to support all use cases) we also need STUN and TURN servers.\n\nNetflux comes with Signaling and STUN servers by default for easier quickstart. For TURN server two solutions are possible: either deploy your own or rent one at [Xirsys](https://xirsys.com/) for example or any other similar services.\n\n\n### Signaling server\n**Default**: `wss://www.coedit.re:20443`\n\nWe developed a Signaling server: [Sigver](https://github.com/coast-team/sigver). It is the only signaling server (signaling mechanism) which is supported by Netflux for now.\n\n**TIP**: we recommend to deploy your own instance of Sigver for production.\n\n### STUN server\n**Default**: `stun:stun3.l.google.com:19302`\n\nThere many other free STUN servers available in the Web.\n\n### TURN servers\nNo free TURN server available in the Web. Checkout [Xirsys](https://xirsys.com/) to rent one or deploy your own.\n\n## How to deploy STUN/TURN servers\n\nThis guide present a basic configuration for [coturn](https://github.com/coturn/coturn).\nIt allow us to deploy our own STUN/TURN server in order to connect users behind a NAT or Firewall.\n\nFor more informations or options, see coturn [documentation](https://github.com/coturn/coturn/wiki/README).\n\nOn most Linux Distribution, the package is in the repo:\n`apt-get install coturn`\n\nYou must have SQLite installed:\n`sudo apt-get install sqlite3 libsqlite3-dev`\n\nConfig file can be found at:\n`/etc/turnserver.conf`\n\nSimple config file should look like this:\n```bash\n# you can listen ports 3478 and 5349 instead of 80/443\nlistening-port=80\ntls-listening-port=443\n\nlistening-ip=your-ip-address\n\nrelay-ip=your-ip-address\nexternal-ip=your-ip-address\n\nrealm=yourdomain.com\nserver-name=yourdomain.com\n\n# webRTC authentication method\nlt-cred-mech\n\n# Database location\nuserdb=/var/lib/turn/turndb\n\n# Add ssl certificate for your server\ncert=/etc/ssl/certificate.pem\npkey=/etc/ssl/private.key\n\nno-stdout-log\n```\n\nIf you don't have any SSL certificate, you may use [Let's Encrypt](https://letsencrypt.org/).\n\nCreate a user in order to access your Turn server:\n`turnadmin -a -u userName -p password -r yourdomain.com`\n\nLaunch your server:\n`turnserver`\nor in daemon:\n`turnserver -o`\n\nVerify that your server is up and running with [Trickle ICE](https://webrtc.github.io/samples/src/content/peerconnection/trickle-ice/).\n",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manual",
    "longname": "/home/philippe/workspace/netflux/manual/usage.md",
    "name": "./manual/usage.md",
    "content": "# Usage\nThere are 4 builds (all ES5 code):\n- `dist/netflux.cjs.js` CommonJS format for NodeJS.\n- `dist/netflux.node.esm.js` ECMAScript 6 module format for NodeJS.\n- `dist/netflux.browser.esm.js` ECMAScript 6 module format for browsers.\n- `dist/netflux.umd.js` UMD format for browsers.\n\nThe `package.json` contains the following fields:\n```json\n...\n\"main\": \"dist/netflux.cjs.js\",\n\"module\": \"dist/netflux.node.esm.js\",\n\"browser\": \"netflux.browser.esm.js\",\n...\n```\n\nAll builds are either for NodeJS or for Browser environment.\n\n**For browser environment** exported members are:\n- `WebGroup`\n- `DataTypeView` type\n- `WebGroupOption` type\n- `WebGroupState` enum\n- `SignalingState` enum\n- `Topology` enum\n\n**For NodeJS environment** exported members are the same as for browser plus:\n- `WebGroupBotServer`\n- `WebGroupBotServerOptions` type.\n\n## ECMAScript module\n\n **Webpack, Browserify etc.**: `netflux.node.esm.js` and `netflux.browser.esm.js` are suitable for these tools or any alike (as they understand `module` and `browser` properties).\n\n```javascript\nexport {WebGroup, WebGroupState, WebGroupBotServer, WebGroupBotServerOptions} from 'netflux'\nconst wg = new WebGroup()\n```\n\n## CommonJS format\n`dist/netflux.cjs.js` - CommonJS format, built for NodeJS.\n\n```Javascript\n// NodeJS\nconst netflux = require('netflux')\nvar wg = new netflux.WebGroup()\n```\n\n## UMD format\n`dist/netflux.umd.js` - Universal Module Definition module is compatible with AMD, CommonJS and \"global\" modules. Built for browser.\n\n```html\n<!--Browser-->\n<script src=\"netflux.es5.umd.js\">\n  window.netflux !== undefined // true\n  var wg = new window.netflux.WebGroup()\n</script>\n```\n\n## Configuration\nFor a `WebGroup` object all options are optional.\n```javascript\nconst wg = new WebGroup({\n  signalingURL: 'MY_SIGNALING_URL',\n  iceServers: [\n    {\n      urls: 'stun.l.google.com:19302'\n    },\n    {\n      urls: ['turn:myturn.com?transport=udp', 'turn:myturn?transport=tcp'],\n      username: 'user',\n      password: 'password'\n    }\n  ]\n})\n```\n\nFor `WebGroupBotServer` the server option is mandatory.\n```javascript\nconst http = require('http')\nconst myServer = http.createServer()\nconst wg = new WebGroupBotServer({\n  signalingURL: 'MY_SIGNALING_URL',\n  iceServers: [\n    {\n      urls: 'stun.l.google.com:19302'\n    },\n    {\n      urls: ['turn:myturn.com?transport=udp', 'turn:myturn?transport=tcp'],\n      username: 'user',\n      password: 'password'\n    }\n  ],\n  bot: {\n    server: myServer\n  }\n})\n```\n",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manual",
    "longname": "/home/philippe/workspace/netflux/manual/bestpractices.md",
    "name": "./manual/bestpractices.md",
    "content": "# Best practices\n## Leave WebGroup before Browser/Tab close\nClean leave is always preferable. Other members will be notified immediately.\n```Javascript\nwindow.addEventListener('beforeunload', () => {\n  if (webGroup !== undefined) {\n    webGroup.leave()\n  }\n})\n```\n",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manual",
    "longname": "/home/philippe/workspace/netflux/manual/faq.md",
    "name": "./manual/faq.md",
    "content": "# FAQ\n\n#### **How `RTCDataChannel` and `WebSocket` are used?**\n\nNetflux can create a peer to peer network with the following connection types:\n - `RTCDataChannel` (WebRTC)\n - `WebSocket`\n\n`RTCDataChannel` connection could be established between:\n - Browser & Browser\n - Browser & Server (If server supports)\n - Server & Server (If both servers support)\n\nOn the other hand, a `WebSocket` could be created only between:\n - Browser & Server\n - Server & Server\n",
    "static": true,
    "access": "public"
  }
]